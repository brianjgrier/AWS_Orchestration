#!/usr/bin/python
#
# This is not really a script, which is why there is no extension to the file.
# This is a collection of commands I am testing to determine what I want as
# functions and variables in the actual script.
#
# I will upate this and then cut/paste commands from here into an
# interactive python session to test how it works.
#
import sys
import json

import boto3

import pprint
#from pprint import pprint as pp

import mysql.connector
from mysql.connector import errorcode

vpctemplateAccess = {
  'user': 'play',
  'password': 'Mine',
  'host': '127.0.0.1',
  'database': 'engit-aws-vpc-templates',
  'raise_on_warnings': True,
}

vpcAccess = {
  'user': 'aws_creator',
  'password': 'theusual',
  'host': '127.0.0.1',
  'database': 'engit-aws',
  'raise_on_warnings': True,
}


def dump(obj):
  for attr in dir(obj):
    print "obj.%s = %s" % (attr, getattr(obj, attr))

pp = pprint.PrettyPrinter(indent=4)


def listMyAmis():
    image_iterator = ec2.images.filter(DryRun=False, Owners=['444388743282'])
    for a in image_iterator:
        print a.image_id, a.name


def listVPCs(ec2):
    for a in ec2.vpcs.all():
        pp(a)

class global_stuff:
   myId       = 'Not Defined'
   group      = None
   idSeparator= None
   custId     = None
   vpc        = None
   subnets    = None
   instances  = None

P = global_stuff()

P.custId = 'cliqr'

def getAddressTable(cnx):
   query = ("SELECT * FROM AddressTable")
   vpcCursor = cnx.cursor()
   vpcCursor.execute(query, ())
   AT_rows = vpcCursor.fetchall()
   ATs = {}
   for (var1, var2) in AT_rows:
      if var1.encode() not in ATs:
         ATs[var1] = []
   x = var2.encode()
   temp = {}
   temp['CidrIp'] = x
   ATs[var1].append({'CidrIp': var2})
   return ATs

def getSecurityInfo(cnx, vpcId):
#
# to do this we informtionfrom two tables. Those tables are "security_rules" and "AddressTable"
# 
   result = {}
   placeHolder = " "
   productionValue = "0"
   query = ("SELECT * FROM security_rules")
   vpcCursor = cnx.cursor()
   vpcCursor.execute(query, ())
   sg_rows = vpcCursor.fetchall()
#
# Now get the information from the "AddressTable"
#
   ipAddrs = getAddressTable(cnx)
#
# Start building the security group matrix
#
   sgs = {}
   for (v1,v2,v3,v4,v5,v6) in sg_rows:
      if v1 not in sgs:
        sgs[v1] = []
   pp(sgs)
#
# Now create the security groups in AWS. We will need to identify them with a human readable name
#
  creaetSecurityGroups(sgs, vpcId)
#
# Now add in the rules where they belong in the dictionary
# If the rule references a source in the Address table space
# then the set of addresses built previously is attached to the rule.
# If the source is not found in the Address table space then
# a marker is created that will be filled in with the appropriate
# AWS security group resource Id after the resource groups are created.
#
   count = 0
   for (var1, var2, var3, var4, var5, var6) in sg_rows:
      rule = 'rule' + str(count)
      result[rule]             = {}
      result[rule]['Name']     = var1.encode()
      result[rule]['Direction']= var2.encode()
      result[rule]['Protocol'] = var3.encode()
      result[rule]['port']     = var4.encode()
      result[rule]['source']   = var5.encode()
#      pp(result)
      print (var1, "  ", var2, "  ", var3, "  ", var4, "  ", var5)
      print
      temp = {}
      temp['FromPort'] = var4.encode()
      temp['IpProtocol'] = var3.encode()
      temp['UserIdGroupPairs'] = []
      temp['IpRanges'] = []
      if var5.encode() in ipAddrs:
         temp['IpRanges'].append(ipAddrs[var5.encode()])
      else:
         temp['UserIdGroupPairs'].append({'GroupId': var5.encode(), 'UserId': P.myId})
      temp['Ipv6Ranges'] = []
      temp['PrefixListIds'] = []
      temp['ToPort'] = var4.encode()
      sgs[var1].append(temp)
      count = count + 1
   return sgs


def getServerInfo(cnx):
   result = {}
   placeHolder = " "
   productionValue = "0"
   query = ("SELECT * FROM server_defs")
   vpcCursor = cnx.cursor()
   vpcCursor.execute(query, ())
   rows = vpcCursor.fetchall()
   count = 0
   for (var1, var2, var3, var4, var5) in rows:
      srvr = 'server' + str(count)
      result[srvr]              = {}
      result[srvr]['Name']      = var1.encode()
      result[srvr]['AMI']       = var2.encode()
      result[srvr]['InstType']  = var3.encode()
      result[srvr]['subnet']    = var4.encode()
      result[srvr]['extraDisk'] = var5
      count = count + 1
   return result


def getSubnetInfo(cnx):
   result = {}
   placeHolder = " "
   productionValue = "0"
   query = ("SELECT * FROM subnets")
   vpcCursor = cnx.cursor()
   vpcCursor.execute(query, ())
   rows = vpcCursor.fetchall()
   count = 0
   for (var1, var2, var3, var4, var5) in rows:
      net = 'subnet' + str(count)
      result[net]            = {}
      result[net]['Name']    = var1.encode()
      result[net]['CIDR']    = var2.encode()  + "/" + var3.encode()
      result[net]['pubPriv'] =  var4
      result[net]['descr']   = var5.encode()
      count = count + 1
   return result

def getVPCInfo(cnx, productionValue ):
   result = {}
   placeHolder = " "
   query = ("SELECT * FROM vpc WHERE Production = %s %s")
   vpcCursor = cnx.cursor()
   vpcCursor.execute(query, (productionValue, placeHolder))
#
# There should only be one but...
#
   count = 0
   rows = vpcCursor.fetchall()
   for (var1, var2, var3, var4) in rows:
      vpc = 'vpc' + str(count)
      result[vpc] = {}
      result[vpc]['region'] = var1.encode()
      result[vpc]['CIDR'] = var2.encode()  + "/" + var3.encode()
      result[vpc]['production'] = var4
      count = count + 1
   return result


for i,j in P.subnets.iteritems():
   print "    " + j['Name'] + IdSeparator +  basename, j['CIDR'] 
   for m,n in P.Instances.iteritems():
     if j['Name'] == n['subnet']:
       print "        " + n['Name'] + IdSeparator +  basename 
 

try:
    cnx = mysql.connector.connect(**vpctemplateAccess)
except mysql.connector.Error as err:
    if err.errno == errorcode.ER_ACCESS_DENIED_ERROR:
        print("Something is wrong with your user name or password")
    elif err.errno == errorcode.ER_BAD_DB_ERROR:
        print("Database does not exist")
    else:
        print(err)

placeHolder = " "
tableName = "vpc"
productionValue = "0"
query = ("SELECT * FROM vpc WHERE Production = %s %s")
vpcCursor = cnx.cursor()
vpcCursor.execute(query, (productionValue, placeHolder))

rows = vpcCursor.fetchall()

for (var1, var2, var3, var4) in rows:
            if var1 != None:
                P.region       = var1.encode()
            if var2 != None:
                P.CIDR         = var2.encode()
            if var3 != None:
                P.CIDR         = P.CIDR + "/" + var3.encode()
            if var4 != None:
                P.production   = var4

print P

P = global_stuff()

P.group = 'alm'
P.idSeparator = '.'
P.custId = 'cliqr'
basename = P.custId + P.idSeparator + P.group  
print basename

P.MyId = boto3.client('sts').get_caller_identity()['Account']
ec2 = boto3.resource('ec2')
listVPCs(ec2)

#
# From https://boto3.readthedocs.io/en/latest/guide/migrationec2.html
#
# vpc = ec2.create_vpc(CidrBlock='10.0.0.0/22')
# subnet = vpc.create_subnet(CidrBlock='10.0.0.0/25')
# gateway = ec2.create_internet_gateway()
#
# Attaching and Detaching an Elastic IP and Gateway
#
# gateway.attach_to_vpc(VpcId=vpc.id)
# gateway.detach_from_vpc(VpcId=vpc.id)
#
# address = ec2.VpcAddress('eipalloc-35cf685d')
# address.associate('i-71b2f60b')
# address.association.delete()


#tag = vpc.create_tags(DryRun=True|False,
#                      Tags=[
#                            {
#                              'Key': 'Name',
#                              'Value': '<engit-vpc>'
#                            },
#                           ])



pp(getVPCInfo(cnx, '0'))
pp(getSubnetInfo(cnx))
pp(getServerInfo(cnx))
pp(getSecurityInfo(cnx))

# Get a list of all the security key pairs.
# They DO NOT have and 'id' fiel, they are referenced by their name 'string'
# Will have to make sure spelling in table "server_defs" is correct
#
for z in ec2.key_pairs.all():
   print z